import sys


def move_up(row, col):
    return row - 1, col


def move_down(row, col):
    return row + 1, col


def move_left(row, col):
    return row, col - 1


def move_right(row, col):
    return row, col + 1


size = int(input())
matrix = []
start_row = 0
start_col = 0

for _ in range(size):
    matrix.append(input().split())
for x in range(size):
    for z in range(size):
        if matrix[x][z] == "B":
            start_row = x
            start_col = z
movement_dict = {
    'up': move_up,
    'down': move_down,
    'left': move_left,
    'right': move_right,
}

best_sum = - sys.maxsize
best_direction = ''
best_path = []
for direction, step_to_function in movement_dict.items():
    current_row, current_col = start_row, start_col
    sum_of_cells = 0
    current_path = []
    while True:
        current_row, current_col = step_to_function(current_row, current_col)
        if current_row < 0 or current_col < 0 or current_row >= size or current_col >= size:
            break
        if matrix[current_row][current_col] == "X":
            break

        current_path.append([current_row, current_col])
        sum_of_cells += int(matrix[current_row][current_col])
        if sum_of_cells > best_sum:
            best_sum = sum_of_cells
            best_direction = direction
            best_path = current_path

print(best_direction)
for el in best_path:
    print(el)
print(best_sum)
